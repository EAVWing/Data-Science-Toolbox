x
b <- read.csv(fileList[goodFileList[1]])
b
append(x, cor(b[,2], b[,3]))
append(x, cor(b[,2], b[,3]))
source('C:/Users/Steve/Data-Science-Toolbox/corr.R')
corr("specdata", 150)
source('C:/Users/Steve/Data-Science-Toolbox/corr.R')
corr("specdata", 150)
source('C:/Users/Steve/Data-Science-Toolbox/corr.R')
corr("specdata", 150)
cor(x = b[,2], y = b[,3])
cor(x = b[,2], y = b[,3], na.rm = TRUE)
cor(x = b[,2], y = b[,3], use = "complete.obs")
source('C:/Users/Steve/Data-Science-Toolbox/corr.R')
corr("specdata", 150)
source('C:/Users/Steve/Data-Science-Toolbox/corr.R')
corr("specdata", 150)
source('C:/Users/Steve/Data-Science-Toolbox/corr.R')
corr("specdata", 150)
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
cr <- corr("specdata")
summary(cr)
length(cr)
source('C:/Users/Steve/Data-Science-Toolbox/corr.R')
cr <- corr("specdata")
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
source('C:/Users/Steve/Data-Science-Toolbox/corr.R')
cr <- corr("specdata", 5000)
length(cr)
cr
source('C:/Users/Steve/Data-Science-Toolbox/corr.R')
cr <- corr("specdata", 5000)
length(cr)
summary(cr)
source('C:/Users/Steve/Data-Science-Toolbox/corr.R')
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_list <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
unique_vals <- sapply(flags, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,
| flags$landmass, mean)
tapply(flags$animate,flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
sapply(iris$Sepal.Length, mean)
iris
mean(iris$Sepal.Length)
tapply(iris,iris$Species, mean)
tapply(iris,iris$Species, FUN = mean)
subset(iris,Species = "virginica")
subset(iris,iris$Species = "virginica")
lappy(iris, mean)
lapply(iris, mean)
lapply(split(iris, Species),mean)
lapply(split(iris, iris[,5]),mean)
split(iris, iris$Species)
r <- split(iris, iris$Species)
lapply(r$virginica, mean)
colMean(iris)
colMeans(iris)
apply(iris[,1:4],1,mean)
apply(iris, 1, mean)
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris[,1:4],1,mean)
apply(iris, 2, mean)
apply(iris[,1:4], 2, mean)
apply(r[,1:4], 2, mean)
r
mean(r$virginica)
apply(r$virginica[,1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
sapply(split(mtcars$mpg, mtcars$cyl),mean)
sapply(split(mtcars$hp, mtcars$cyl),mean)
209.21429-82.63636
tapply(iris$Sepal.Length, iris$Species, mean)
source('C:/Users/Steve/Data-Science-Toolbox/makeVector.R')
makeVector
x <- c(1,2,3,4,5)
makeVector(x)
x
get(x)
m
makeVector(x)
source('C:/Users/Steve/Data-Science-Toolbox/makeVector.R')
cachemean(x)
source('C:/Users/Steve/Data-Science-Toolbox/makeVector.R')
x
cachemean(makeVector(x))
matrix(1:4, 4:1)
matrix(1:4,1:4, 4:1)
matrix(2:2,2:2, 2:2)
matrix(1:4,2:2, 2:2)
x <- matrix(1:4,2:2, 2:2)
x
solve(x)
cacheSolve(makeCacheMatrix(x))
source('C:/Users/Steve/Data-Science-Toolbox/cachematrix.R')
cacheSolve(makeCacheMatrix(x))
swil()
swirll()
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace = FALSE)
sample(1:20, 10)
letters
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
rbinom(100, size = 1, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(100, 25)
rnorm(10, mean = 100, sd = 25)
rpois(5, mean = 10)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
hear(cars)
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
load(mtcars)
mtcars
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
?ppois
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
plot(y)
rbinom()
rbinom(4)
rbinom(4, 4)
rbinom(4, 4, .5)
setwd("C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
outcome(outcome$Hospital.Name)
outcome$Hospital.Name
outcome$State
names(outcome)
subset.data.frame(outcome, [,2], [,7], [,11], [,17], [,23])
subset.data.frame(outcome [,2], [,7], [,11], [,17], [,23])
?subset.data.frame
subset.data.frame(outcome, select = c([,2], [,7], [,11], [,17], [,23]))
subset.data.frame(outcome, select = c(2,7,11,17,23))
data <- subset.data.frame(outcome, select = c(2,7,11,17,23))
?names
names(data)
names(data) <- c(Hospital, State, Heart.Attack, Heart.Failure, Pneumonia)
names(data) <- c("Hospital", "State", "Heart.Attack", "Heart.Failure", "Pneumonia")
names(data)
head(data)
split(data$State)
?split
split(data, data$State)
unique(data, data$State)
unique(data$State)
states <- uniques(data$State)
states <- unique(data$State)
states
"AL" in states
exists("AL" in states)
?exists
?where
'??where'
??where
is.na(states["AL"])
is.na(states[AL])
"AL" in states
"AL" %in% states
is.element("AL", states)
is.element("AC", states)
source('C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3/best.R')
source('C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3/best.R')
best("AL", "heart attack")
best("AC", "heart attack")
best("AL", "heart attack")
outcomes <- c("heart attack", "heart failure", "pneumonia")
outcome <- "heart attack"
is.element(outcome, outcomes)
outcome <- "bla"
is.element(outcome, outcomes)
source('C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3/best.R')
best("NY", "hert attack")
class(states)
class(outcomes)
best("NY", "hert attack")
source('C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3/best.R')
best("NY", "hert attack")
source('C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3/best.R')
best("NY", "hert attack")
?is.element
source('C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3/best.R')
best("NY", "hert attack")
outcomesVector <- c("heart attack", "heart failure", "pneumonia")
outcomesVector
statesVector <- unique(data$State)
statesVector
"WA" %in% statesVector
"BB" in statesVector
"BB" %in% statesVector
"heart failure" %in% outcomesVector
source('C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3/best.R')
best("NY", "hert attack")
source('C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3/best.R')
best("NY", "hert attack")
best("NY", "heart attack")
best("NA", "heart attack")
?sort
tappy(data, data$state, sort())
tapply(data, data$state, sort())
tapply(data, data$state, sort
)
tapply(data$state, data$Heart.Attack, sort)
tapply(data$state, data$Heart.Attack, min)
tapply(data$state, data$Heart.Attack, min())
tapply(data$Hospital, data$Heart.Attack, min())
tapply(data$Hospital, data$Heart.Attack, min)
z <- tapply(data$Hospital, data$Heart.Attack, min)
z[1]
split(data, data$State)
subset.data.frame(data, state = "AL")
subset.data.frame(data, data$state = "AL")
?subset
subset.data.frame(data, state == "AL")
subset.data.frame(data, State == "AL")
tapply(stateData$Hospital, stateData$outcome, min)
stateData <- subset.data.frame(data, State == state)
state <- "AL"
stateData <- subset.data.frame(data, State == state)
stateData <- subset.data.frame(data, State == state)
tapply(stateData$Hospital, stateData$outcome, min)
stateData
tapply(stateData$Hospital, stateData$Heart.Attack, min)
source('C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3/best.R')
best("AL", "pneumonia")
fulldata <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- subset.data.frame(fulldata, select = c(2,7,11,17,23))
names(data) <- c("Hospital", "State", "heart attack", "heart failure", "pneumonia")
statesVector <- unique(data$State)
outcomesVector <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, statesVector) == FALSE){
stop("invalid state")
}
if (is.element(outcome, outcomesVector) == FALSE){
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
stateData <- subset.data.frame(data, State == state)
result <- tapply(stateData$Hospital, stateData$outcome, min)
}
outcome <- "pneumonia"
fulldata <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- subset.data.frame(fulldata, select = c(2,7,11,17,23))
names(data) <- c("Hospital", "State", "heart attack", "heart failure", "pneumonia")
statesVector <- unique(data$State)
outcomesVector <- c("heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (is.element(state, statesVector) == FALSE){
stop("invalid state")
}
if (is.element(outcome, outcomesVector) == FALSE){
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
stateData <- subset.data.frame(data, State == state)
result <- tapply(stateData$Hospital, stateData$outcome, min)
}
source('C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3/best.R')
best("AL", "pneumonia")
unclass(result[1])
source('C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3/best.R')
best("AL", "pneumonia")
source('C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3/best.R')
best("AL", "pneumonia")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("MD", "heart attack")
best("MD", "heart failure")
best("MD", "pneumonia")
best("TX", "heart attack")
best("MD", "pneumonia")
subset.data.frame(data, State == "MD")
source('C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3/best.R')
best("MD", "pneumonia")
min(stateData$`heart attack`)
source('C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3/best.R')
best("MD", "pneumonia")
stateData
fulldata <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- subset.data.frame(fulldata, select = c(2,7,11,17,23))
names(data) <- c("Hospital", "State", "heart.attack", "heart.failure", "pneumonia")
statesVector <- unique(data$State)
outcomesVector <- c("heart attack", "heart failure", "pneumonia")
state <- "AL"
outcome <- "heart attack"
apply(stateData$Hospital, stateData$heart.attack, min)
?apply
apply(stateData, stateData$heart.attack, min)
apply(stateData, stateData[,3], min)
?sort
?order
stateData[order(-stateData$`heart attack`)]
stateData[order(-stateData$`heart.attack`)]
order(stateData)
stateData
min(stateData$pneumonia)
?arrange
source('C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3/best.R')
beat("AL", "heart attack")
best("AL", "heart attack")
best("MD", "pneumonia")
source('C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3/best.R')
best("MD", "pneumonia")
stateData <- subset.data.frame(data, State == "state"MD)
stateData <- subset.data.frame(data, State == "MD")
stateData
tapply(stateData$Hospital, stateData$pneumonia, min)
r <- tapply(stateData$Hospital, stateData$pneumonia, min)
min(r)
class(r)
min(r[2,])
summary(r)
r[1]
lapply(r, min)
r
r <- tapply(stateData$pneumonia, stateData$Hospital, min)
r
min(r)
sort(r)
r <- as.numeric(tapply(stateData$pneumonia, stateData$Hospital, min))
r
r <- as.list(tapply(stateData$pneumonia, stateData$Hospital, min))
r
source('C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3/best.R')
best("MD", "pneumonia")
source('C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3/best.R')
best("MD", "pneumonia")
source('C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3/best.R')
best("MD", "pneumonia")
numStateData <- transform(stateData, heart.attack = as.numeric(heart.attack), heart.failure = as.numeric(heart.failure), pneumonia = as.numeric(pneumonia))
source('C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3/best.R')
best("MD", "pneumonia")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
?as.numeric
best("MD", "pneumonia")
best("BB", "heart attack")
?tapply
source('C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
source('C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
source('C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
stateData <- subset.data.frame(data, State == "state"TX"")
stateData <- subset.data.frame(data, State == "TX")
stateData
result <- tapply(stateData$Hospital, as.numeric(stateData$heart.failure), min)
result
stateData
rankhospital("TX", "heart failure", 4)
source('C:/Users/Steve/Data-Science-Toolbox/ProgrammingAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
